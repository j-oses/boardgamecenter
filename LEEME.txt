Jorge OsÃ©s Grijalba
Ã�lvaro RodrÃ­guez GarcÃ­a

2o D.G. InformÃ¡tica - MatemÃ¡ticas

Changes in the practica4 package:
- Now before generating valid moves it checks if the board is full to optimize.
- Fixed a bug where nextPlayer entered on an infinite loop with a full board.
    - This was done originally because the normal program flow stops before calling nextPlayer if the board is full.
      However, the minMax algorithm may call nextPlayer even with a full board.
- Fixed several cases of '==' instead '.equals'

Changes in the practica5 package:
- We added a couple of safety checks in BoardJPanel to prevent a crash when deselecting cells that doesn't exist yet.
- Fixed several cases of '==' instead '.equals'
- Made the controller quite cleaner.
- Now the addGameWindowForPieces method in VisualController takes an extra argument: an Observable<GameObserver>. This
  is to prevent registering necessarily in a Game. Now you can choose in what Observable to register.
- Implemented some suggestions from the correction:
    - Antialiasing & small margin when painting.
    - Removed some unnecessary line breaks.
    - VisualController is not a controller anymore, and it's called SwingView.
    - ConnectN now starts correctly.
- The AI player banned and the random player banned were swapped.
- The quit confirmation window answer was ignored when closed with the default close button (the red X).
- A remark on the correction: we pass playerIds instead pieces to the pieces listener to make it easy to swap them by
  player names (instead the piece ids) in the future.

Comments about the practica6 code:
- We have several versions of the evaluate function for ataxx, which we have encapsulated on an Evaluator class. The
  ComplexEvaluator takes two parameters to perform the evaluation (which are weights of the different factors). We have
  been making tests and the best evaluator seems to be the one with parameters (0.2, 0.5) but in fact (0.2, 0.2) for
  example is also pretty good. The PieceCountingEvaluator is the one suggested by the pdf file.
- The aiautomatedplay package contains the classes we have used to pit the intelligent players against themselves.
- The ClientTestingMain & ServerTestingMain are simple mains for testing an ataxx game.
- We have used with very little to no modifications the AbstractServer & SocketEndpoint & ObjectEndpoint classes from
  the Campus Virtual.
- As the expected behaviour of the server were not detailed in the pdf file, we have implemented the following:
    - The server starts a game when the expected clients have been connected (as many as pieces), and refuses any
      further connection attempt.
    - The client has access to a quit button on its turn. If clicked, the server will stop the game and kick all the
      remaining players. A warning will be shown to each client (but the one who clicked close).
    - The server will reset after kicking all the players, returning to the first step.
    - If the quit button on the server is clicked, it will kick all the players and close himself.
    - When a client's game is stopped, the client terminates.

Changes in the last version:
- Solved extraneous import (it was an autoimport fail by intelliJ)
- Packages structured
- Changed gameMove toString